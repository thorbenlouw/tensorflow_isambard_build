 *******************************************************************************
 Copyright 2020 Arm Limited and affiliates.
 SPDX-License-Identifier: Apache-2.0

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 *******************************************************************************


--- a/tensorflow/workspace.bzl	2020-07-08 10:24:27.672149000 +0100
+++ b/tensorflow/workspace.bzl	2020-07-08 10:24:41.020335000 +0100
@@ -132,15 +132,10 @@
     # MKL-DNN might require upgrading MKL ML libraries also. If they need to be
     # upgraded then update the version numbers on all three versions above
     # (Linux, Mac, Windows).
-    tf_http_archive(
+    native.new_local_repository(
         name = "mkl_dnn",
         build_file = clean_dep("//third_party/mkl_dnn:mkldnn.BUILD"),
-        sha256 = "74675e93eef339ff3d9a9be95c15d0c7ad8736a5356c23428ab2e33dcdb8e3e1",
-        strip_prefix = "mkl-dnn-0.20.6",
-        urls = [
-            "https://storage.googleapis.com/mirror.tensorflow.org/github.com/intel/mkl-dnn/archive/v0.20.6.tar.gz",
-            "https://github.com/intel/mkl-dnn/archive/v0.20.6.tar.gz",
-        ],
+        path = '/opt/onednn/0.21.3'
     )
 
     tf_http_archive(
--- a/third_party/mkl_dnn/mkldnn.BUILD	2020-07-08 10:25:04.878131000 +0100
+++ b/third_party/mkl_dnn/mkldnn.BUILD	2020-07-08 10:31:41.261234000 +0100
@@ -18,16 +18,6 @@
     },
 )
 
-template_rule(
-    name = "mkldnn_config_h",
-    src = "include/mkldnn_config.h.in",
-    out = "include/mkldnn_config.h",
-    substitutions = {
-        "#cmakedefine MKLDNN_CPU_BACKEND MKLDNN_BACKEND_${MKLDNN_CPU_BACKEND}": "#define MKLDNN_CPU_BACKEND MKLDNN_BACKEND_NATIVE",
-        "#cmakedefine MKLDNN_GPU_BACKEND MKLDNN_BACKEND_${MKLDNN_GPU_BACKEND}": "#define MKLDNN_GPU_BACKEND MKLDNN_BACKEND_NONE",
-    },
-)
-
 # Create the file mkldnn_version.h with MKL-DNN version numbers.
 # Currently, the version numbers are hard coded here. If MKL-DNN is upgraded then
 # the version numbers have to be updated manually. The version numbers can be
@@ -38,61 +28,25 @@
 # TODO(bhavanis): MKL-DNN minor version needs to be updated for MKL-DNN v1.x.
 # The current version numbers will work only if MKL-DNN v0.20 is used.
 
-template_rule(
-    name = "mkldnn_version_h",
-    src = "include/mkldnn_version.h.in",
-    out = "include/mkldnn_version.h",
-    substitutions = {
-        "@MKLDNN_VERSION_MAJOR@": "0",
-        "@MKLDNN_VERSION_MINOR@": "20",
-        "@MKLDNN_VERSION_PATCH@": "3",
-        "@MKLDNN_VERSION_HASH@": "N/A",
-    },
+cc_library(
+    name = "mkldnn_headers",
+    srcs = glob(["include/*"]),
+    includes = ["include"],
+    visibility = ["//visibility:public"],
+)
+
+cc_library(
+    name = "mkldnn_libs",
+    srcs = glob(["lib/*"]),
+    visibility = ["//visibility:public"],
 )
 
 cc_library(
     name = "mkl_dnn",
-    srcs = glob([
-        "src/common/*.cpp",
-        "src/common/*.hpp",
-        "src/cpu/*.cpp",
-        "src/cpu/*.hpp",
-        "src/cpu/**/*.cpp",
-        "src/cpu/**/*.hpp",
-        "src/cpu/xbyak/*.h",
-    ]) + if_mkl_v1_open_source_only([
-        ":mkldnn_config_h",
-    ]) + [":mkldnn_version_h"],
-    hdrs = glob(["include/*"]),
-    copts = [
-        "-fexceptions",
-        "-DUSE_MKL",
-        "-DUSE_CBLAS",
-    ] + if_mkl_open_source_only([
-        "-UUSE_MKL",
-        "-UUSE_CBLAS",
-    ]) + if_mkl_v1_open_source_only([
-        "-UUSE_MKL",
-        "-UUSE_CBLAS",
-    ]) + select({
-        "@org_tensorflow//tensorflow:linux_x86_64": [
-            "-fopenmp",  # only works with gcc
-        ],
-        # TODO(ibiryukov): enable openmp with clang by including libomp as a
-        # dependency.
-        ":clang_linux_x86_64": [],
-        "//conditions:default": [],
-    }),
-    includes = [
-        "include",
-        "src",
-        "src/common",
-        "src/cpu",
-        "src/cpu/gemm",
-        "src/cpu/xbyak",
-    ],
     visibility = ["//visibility:public"],
-    deps = select({
+    deps = ["@mkl_dnn//:mkldnn_headers",
+            "@mkl_dnn//:mkldnn_libs",
+           ] + select({
         "@org_tensorflow//tensorflow:linux_x86_64": [
             "@mkl_linux//:mkl_headers",
             "@mkl_linux//:mkl_libs_linux",
